"""
@File         : File_System.py
@Author(s)    : Stephen CUI
@LastEditor(s): Stephen CUI
@CreatedTime  : 2024-02-22 21:33:18
@Email        : cuixuanstephen@gmail.com
@Description  : 
"""

import streamlit as st

# st.subheader("Stephen CUI")
# st.subheader("2024-02-22 21:33:18")

# tabs = st.tabs(
#     [
#         "os.path: 平台独立的文件名管理",
#         "pathlib: 文件系统路径作为对象",
#         "glob: 文件名匹配模式",
#         "fmmatch: UNIX 式 glob 模式匹配",
#         "Linecache: 高效读取文本文件",
#         "tempfile: 临时文件系统对象",
#         "shutil: 高层文件操作",
#         "filecmp: 文件比较",
#         "mmap: 内存映射文件",
#         "codecs: 字符串编码和解码",
#         "io: 文本、十进制和原始流 I/O 工具",
#     ]
# )
st.title("Python3标准库 Py3SL")
st.subheader(":rainbow[Stephen CUI]")
st.subheader("2024-02-22 22:23:18")

st.header("文件系统")
st.markdown(
    """
    Python 的标准库包含大量用于处理文件系统上的文件、构建和解析文件名以及检查文件内容的工具。

    处理文件的第一步是确定要处理的文件的名称。 Python 将文件名表示为简单的字符串，但提供了从 `os.path` 中的标准、平台无关组件构建文件名的工具。

    `pathlib` 模块提供了一个面向对象的 API 来处理文件系统路径。 使用它代替 `os.path` 提供了更大的便利，因为它在更高的抽象级别上运行。

    使用 `os`中的 `listdir()` 列出目录的内容，或使用 `glob`根据模式构建文件名列表。

    `glob` 使用的文件名模式匹配也直接通过 `fnmatch` 公开，因此它可以在其他上下文中使用。

    识别文件名后，可以使用 `os.stat()` 和 `stat` 中的常量检查其他特征，例如权限或文件大小。

    当应用程序需要随机访问文件时，行缓存可以轻松地按行号读取行。 文件的内容保存在缓存中，因此请注意内存消耗。

    `tempfile` 对于需要创建临时文件来临时保存数据或在将数据移动到永久位置之前的情况非常有用。 它提供了安全可靠地创建临时文件和目录的类。 名称保证是唯一的，并且包含随机组成部分，因此不容易被猜到。

    通常，程序需要将文件作为一个整体来处理，而不考虑其内容。

    `shutil` 模块包括高级文件操作，例如复制文件和目录以及创建或提取文件档案。

    `filecmp` 模块通过查看文件和目录包含的字节来比较文件和目录，但无需了解其格式的任何特殊知识。

    内置文件类可用于读取和写入本地文件系统上可见的文件。 但是，当程序通过 `read()` 和 `write()` 接口访问大文件时，其性能可能会受到影响，因为当数据从磁盘移动到应用程序可以看到的内存时，它们都涉及多次复制数据。 使用 `mmap` 告诉操作系统使用其虚拟内存子系统将文件的内容直接映射到程序可访问的内存中，从而避免操作系统和文件对象的内部缓冲区之间的复制步骤。

    使用 ASCII 中不可用的字符的文本数据通常以 Unicode 数据格式保存。 由于标准文件句柄假定文本文件的每个字节代表一个字符，因此读取具有多字节编码的 Unicode 文本需要额外的处理。 编解码器模块自动处理编码和解码，因此在许多情况下可以使用非 ASCII 文件，而无需对程序进行任何其他更改。

    `io` 模块提供对用于实现 Python 基于文件的输入和输出的类的访问。 为了测试依赖于从文件中读取或写入数据的代码，`io` 提供了一个内存中的流对象，其行为类似于文件，但不驻留在磁盘上。
    """
)
