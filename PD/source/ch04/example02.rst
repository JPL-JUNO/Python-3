>>> a = 37      # 用值 37 创建一个对象
>>> b = a       # 对 37 增加引用计数
>>> c = []      
>>> c.append(b) # 对 37 增加引用计数

一个对象的引用计数在遇到 del 语句、引用超出返回或引用重新分配时会减少

>>> del a      # 对 37 减少引用计数
>>> b = 42     # 对 37 减少引用计数
>>> c[0] = 2.0 # 对 37 减少引用计数

对象的当前引用计数可以通过 ``sys.getrefcount()``函数获得

>>> a = 37
>>> import sys
>>> sys.getrefcount(a)
1000000007
>>>

在某些情况下，循环依赖关系可能存在于不在使用的对象集合中

>>> a = { }
>>> b = { }
>>> a['b'] = b
>>> b['a'] = a
>>> del a
>>> del b


可以使用 gc 标准库模块中的函数调整和控制精确行为。``gc.collect()`` 函数可用于立即调用循环垃圾收集器

在处理庞大的数据结构时，可能需要手动删除对象，而不是等待垃圾回收

>>> def some_calculation():
...     data = create_giant_data_structure() 
...     # 在计算的某些部分使用数据
...     ...
...
...     # 释放数据
...     del data
...     
...     # 继续计算
...     ...

